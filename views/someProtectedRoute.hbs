<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="icon" href="/assets/icon.ico" type="image/x-icon">
    <title>Splat! Fun</title>
    <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" rel="stylesheet">
    <style>
        .splat-text,
        .circle {
            position: absolute;
            user-select: none;
        }

        .splat-text {
            font-weight: bold;
        }

        .circle {
            border-radius: 50%;
        }

        #logout-button {
            position: relative;
            /* Ensure the logout button stays on top */
            z-index: 1000;
        }

        #skills {
            border-right: 4px solid cadetblue;
            padding: .2rem;
            font-size: 2rem;
            overflow: auto;
            /* Change this to 'auto' to allow scrolling */
            white-space: pre-wrap;
            /* Change this to 'pre-wrap' to honor new lines and wrap text */
            word-break: break-word;
            /* Ensures long words do not cause overflow */
        }

        #info {
            text-align: left;
            direction: ltr;
            padding: 10px;
        }

        .company-logo {
            max-width: 100px;
            /* Max width of the logo */
            height: auto;
            /* Maintain aspect ratio */
            width: auto;
            /* Adjust width automatically */
            margin-bottom: 20px;
            /* Space below the logo */
        }
    </style>
</head>

<body>
    <div class="text-center">
        <form id="logout-button" action="/logout" method="POST">
            <h1>Welcome to the Protected Pages</h1>
            <button type="submit">Logout</button>
        </form>
        <img src="/assets/splat.svg"  alt="Company Logo" class="company-logo">
        <div id="splats"></div>
        <div id="info">
            <pre id="skills"></pre>
        </div>
    </div>

    <script>
        function getRandomInt(min, max) {
            return Math.floor(Math.random() * (max - min + 1)) + min;
        }
        const splats = document.getElementById('splats');

        function createSplat() {
            const splat = document.createElement('div');
            splat.textContent = 'Splat!';
            splat.className = 'splat-text';
            splat.style.left = getRandomInt(0, window.innerWidth) + 'px';
            splat.style.top = getRandomInt(100, window.innerHeight) + 'px'; // Start at 100px to avoid the logout button
            splat.style.fontSize = getRandomInt(20, 60) + 'px';
            splat.style.color = `rgb(${getRandomInt(0, 255)}, ${getRandomInt(0, 255)}, ${getRandomInt(0, 255)})`;
            splat.style.transform = 'rotate(' + getRandomInt(-45, 45) + 'deg)';
            splats.appendChild(splat);
        }

        function createCircle() {
            const circle = document.createElement('div');
            circle.className = 'circle';
            circle.style.left = getRandomInt(0, window.innerWidth) + 'px';
            circle.style.top = getRandomInt(100, window.innerHeight) + 'px'; // Start at 100px to avoid the logout button
            const size = getRandomInt(10, 100);
            circle.style.width = size + 'px';
            circle.style.height = size + 'px';
            circle.style.backgroundColor = `rgba(${getRandomInt(0, 255)}, ${getRandomInt(0, 255)}, ${getRandomInt(0, 255)}, 0.5)`;
            splats.appendChild(circle);
        }


        // // this allows splats to form on page (just for fun)
        //setInterval(() => {
        //  createSplat();
        //createCircle();
        //}, 1000); 

        // animate text to appear to be typing animation
        function animateText(txt) {
            const textContainer = document.querySelector("#skills");
            let i = 0;
            const oneFrame = () => {
                if (i == txt.length) return;
                requestAnimationFrame(() => {
                    textContainer.textContent += txt[i];
                    i++;
                    setTimeout(oneFrame, 10);
                });
            };
            setTimeout(oneFrame, 100);
        }

        animateText(`Steps to integrate this into your project: \n\n1. Integrate the Authorization Module: Import the authorization component into your existing Node.js project.\n
2. Configure Environment: Set up environment variables or config files in your existing project to store authorization details (like secret keys).\n
3. Middleware Setup: Implement middleware in your existing project's server file to utilize the authorization component for route protection.\n
4. Update Routes: Modify your existing routes to include the authorization middleware, ensuring protected routes require valid authentication.\n
5. Test Integration: Perform tests to ensure that the authorization component is correctly handling authentication and protecting routes.\n
6. Refactor and Optimize: Refactor code for better efficiency and readability, ensuring seamless integration of the authorization component.\n
7. Documentation: Update your project's documentation to reflect the changes and how the authorization process works within the application.\n
`);
    </script>
</body>

</html>